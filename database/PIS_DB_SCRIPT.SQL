DROP TABLE IF EXISTS USER_ORGANIZATION;
DROP TABLE IF EXISTS USER_ROLE;
DROP TABLE IF EXISTS USER_NOK;
DROP TABLE IF EXISTS USER_PIC;
DROP TABLE IF EXISTS ORGANIZATION_CONTACT;
DROP TABLE IF EXISTS RF_ROLE;
DROP TABLE IF EXISTS RF_RELATION;
DROP TABLE IF EXISTS MOVEMEMENT_BODYPART;
DROP TABLE IF EXISTS USER_HEALTH_HISTORY;
DROP TABLE IF EXISTS USER_EXERCISE_DETAIL;
DROP TABLE IF EXISTS USER_EXERCISE;
DROP TABLE IF EXISTS USER_TARGET_DETAIL;
DROP TABLE IF EXISTS USER_TARGET;
DROP TABLE IF EXISTS USER_ACTIVITY;
DROP TABLE IF EXISTS CHAT_MESSAGE;
DROP TABLE IF EXISTS USER_CHAT_SESSION;
DROP TABLE IF EXISTS CHAT_SESSION;
DROP TABLE IF EXISTS RF_BODYPART;
DROP TABLE IF EXISTS RF_MOVEMENT;
DROP TABLE IF EXISTS USER_CONTACT;
DROP TABLE IF EXISTS ORGANIZATION;
DROP TABLE IF EXISTS USER;




CREATE TABLE USER (
	USERID INT NOT NULL AUTO_INCREMENT,
	USERNAME NVARCHAR(50) NOT NULL,
	PASSWORD CHAR(10) NOT NULL,
	FIRSTNAME NVARCHAR(50) NOT NULL,
	MIDDLENAME NVARCHAR(50),
	LASTNAME NVARCHAR(50) NOT NULL,
	DOB DATE NOT NULL,
	DTJOINED TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
	DTUPDATED TIMESTAMP DEFAULT CURRENT_TIMESTAMP,

	PRIMARY KEY (USERID, USERNAME),
	INDEX (USERNAME, FIRSTNAME, LASTNAME)
);

CREATE TABLE USER_CONTACT (
	USERID INT NOT NULL,
	CONTACTTYPE SMALLINT NOT NULL, #1 = MOBILE PHONE, 2 = HOME PHONE, 3 = BUSINESS PHONE, 4 = EMAILM 5 = ADDRESS
	CONTACTVALUE NVARCHAR(200) NOT NULL,
	DTSTART DATE NOT NULL,

	INDEX (USERID, CONTACTTYPE, CONTACTVALUE, DTSTART),

	FOREIGN KEY (USERID)
		REFERENCES USER (USERID)

);


CREATE TABLE ORGANIZATION (
	ORGANIZATIONID INT NOT NULL AUTO_INCREMENT,
	ORGANIZATIONNAME NVARCHAR(100) NOT NULL,
	DTJOINED TIMESTAMP DEFAULT CURRENT_TIMESTAMP,

	PRIMARY KEY (ORGANIZATIONID)
);


CREATE TABLE ORGANIZATION_CONTACT (
	ORGANIZATIONID INT NOT NULL,
	PIC INT NOT NULL,
	CONTACTTYPE SMALLINT NOT NULL, #1 = MOBILE PHONE, 2 = HOME PHONE, 3 = BUSINESS PHONE, 4 = EMAILM 5 = ADDRESS
	CONTACTVALUE NVARCHAR(200) NOT NULL,
	DTSTART DATE NOT NULL,

	INDEX (ORGANIZATIONID, PIC, CONTACTTYPE, CONTACTVALUE, DTSTART),

	FOREIGN KEY (ORGANIZATIONID)
		REFERENCES ORGANIZATION (ORGANIZATIONID),
        
	FOREIGN KEY (PIC)
		REFERENCES USER (USERID)
);

CREATE TABLE USER_ORGANIZATION (
	USERID INT NOT NULL,
	ORGANIZATIONID INT NOT NULL,
    
	FOREIGN KEY (USERID)
		REFERENCES USER(USERID),

	FOREIGN KEY (ORGANIZATIONID)
		REFERENCES ORGANIZATION (ORGANIZATIONID)
);


CREATE TABLE RF_ROLE (
	ROLEID INT NOT NULL AUTO_INCREMENT,
	ROLEDESC NVARCHAR(50) NOT NULL, # ADMIN, MANAGER, USER, OWNER, ETC

	PRIMARY KEY (ROLEID)
);

CREATE TABLE USER_ROLE (
	USERID INT,
	ROLEID INT,


	FOREIGN KEY (USERID)
		REFERENCES USER(USERID),

	FOREIGN KEY (ROLEID)
		REFERENCES RF_ROLE(ROLEID)

);

CREATE TABLE RF_RELATION (
	RELATIONID INT NOT NULL AUTO_INCREMENT,
	RELATIONDESC NVARCHAR(50) NOT NULL,	# 1-PARENTS, 2-KIDS, 3-SIBLINGS, 4-SPOUSE, 5-ETC

	PRIMARY KEY (RELATIONID)
);


CREATE TABLE USER_NOK (
	USERID INT NOT NULL,
	FIRSTNAME NVARCHAR(50) NOT NULL,
	LASTNAME NVARCHAR(50) NOT NULL,
	MOBILENO NVARCHAR(15) NOT NULL,
	EMAIL NVARCHAR(50) NOT NULL,
	RELATIONID INT NOT NULL,

	PRIMARY KEY (USERID),
	INDEX (FIRSTNAME, LASTNAME, MOBILENO, EMAIL),
	INDEX (RELATIONID),

	FOREIGN KEY (USERID)
		REFERENCES USER(USERID),
		#ON UPDATE

	FOREIGN KEY (RELATIONID)
		REFERENCES RF_RELATION(RELATIONID)
		
);

CREATE TABLE USER_PIC (
	USERID INT NOT NULL,
	PICPATH NVARCHAR(100) NOT NULL,
	DTSTART DATE,

	PRIMARY KEY (USERID),

	FOREIGN KEY (USERID)
		REFERENCES USER(USERID) 
);


/*
 * Reference Table for body parts
 * List down each muscle or bone
 * Weight and height, body fat pct are here as well
 */
 CREATE TABLE RF_BODYPART (
 	BODYPARTID INT NOT NULL, # 1 for muscle, 2 for bone, 3 for joints, (4-6 for full body view) 4 for right side view, 5 for left side view, 6 for front view, 7 for back view etc
	BODYPARTDESC NVARCHAR(100),

	PRIMARY KEY (BODYPARTID)
);


CREATE TABLE RF_MOVEMENT (
	MOVEMENTID INT NOT NULL AUTO_INCREMENT,
	STEPS TEXT NOT NULL,
	VIDEOPATH NVARCHAR(100),
	NOTES TEXT,

	PRIMARY KEY (MOVEMENTID)
);


# Which movement moves which part
CREATE TABLE MOVEMEMENT_BODYPART (
	MOVEMENTID INT NOT NULL,
	BODYPARTID INT NOT NULL,
	NOTES TEXT,

	PRIMARY KEY (MOVEMENTID, BODYPARTID),

	FOREIGN KEY (MOVEMENTID)
		REFERENCES RF_MOVEMENT (MOVEMENTID),

	FOREIGN KEY (BODYPARTID)
		REFERENCES RF_BODYPART (BODYPARTID)
);


CREATE TABLE USER_HEALTH_HISTORY (
	USERID INT NOT NULL,
	BODYPARTID INT NOT NULL,
	DTSTART DATE,
	DTEND DATE,
	SCALE DOUBLE, #Scale 1 - 10, quantifying how painful
	REASON NVARCHAR(100),
	NOTES NVARCHAR(100), 
	PICPATH NVARCHAR(100), #Path to pic if any

	PRIMARY KEY (USERID, BODYPARTID, DTSTART, DTEND),

	FOREIGN KEY (USERID)
		REFERENCES USER (USERID),

	FOREIGN KEY (BODYPARTID)
		REFERENCES RF_BODYPART (BODYPARTID)
);


CREATE TABLE USER_ACTIVITY (
	USERID INT NOT NULL,
	ACTIVITY NVARCHAR(20) NOT NULL,
	ACTIVITYDESC TEXT NOT NULL,
	DTSTART DATE,
	DTEND DATE,

	PRIMARY KEY (USERID, ACTIVITY),

	FOREIGN KEY (USERID)
		REFERENCES USER (USERID)
);


CREATE TABLE USER_TARGET (
	USERTARGETID INT NOT NULL AUTO_INCREMENT,
	USERID INT NOT NULL,
	BODYPARTID INT NOT NULL,
	DTTARGET DATE NOT NULL,
	SOM NVARCHAR(10) NOT NULL,
	TARGETVALUE DOUBLE NOT NULL,
    DTENTERED TIMESTAMP DEFAULT CURRENT_TIMESTAMP,

	PRIMARY KEY (USERTARGETID),
	INDEX (USERID, BODYPARTID),

	FOREIGN KEY (USERID)
		REFERENCES USER (USERID),

	FOREIGN KEY (BODYPARTID)
		REFERENCES RF_BODYPART (BODYPARTID)

);


#Break down target to smaller targets
CREATE TABLE USER_TARGET_DETAIL (
	USERTARGETID INT NOT NULL,
	TARGETTEXT NVARCHAR(300) NOT NULL,
	DTTARGET DATE NOT NULL,
	ACHIEVED BOOLEAN DEFAULT FALSE,
	DTENTERED TIMESTAMP DEFAULT CURRENT_TIMESTAMP,

	PRIMARY KEY (USERTARGETID),
	INDEX (TARGETTEXT, DTTARGET,DTENTERED),

	FOREIGN KEY (USERTARGETID)
		REFERENCES USER_TARGET (USERTARGETID)
);


CREATE TABLE USER_EXERCISE (
	USEREXERCISEID INT NOT NULL AUTO_INCREMENT,
	ORGANIZATIONID INT NOT NULL,
	USERID INT NOT NULL,
	DTEXERCISE DATE NOT NULL,
	SUPERVISORID INT NOT NULL,
	TYPE SMALLINT NOT NULL, # 1-PLAN , 2=ACTUAL (LOG)

	PRIMARY KEY (USEREXERCISEID),
	INDEX (ORGANIZATIONID, USERID, DTEXERCISE, TYPE),

	FOREIGN KEY (ORGANIZATIONID)
		REFERENCES ORGANIZATION (ORGANIZATIONID),

	FOREIGN KEY (USERID) 
		REFERENCES USER (USERID),

	FOREIGN KEY (SUPERVISORID)
		REFERENCES USER (USERID) 
);


CREATE TABLE USER_EXERCISE_DETAIL (
	USEREXERCISEID INT NOT NULL,
	MOVEMENTID INT NOT NULL,
	EXERCISESEQ INT NOT NULL,
	SETS INT, # Num of sets
	REPS INT, # Num of reps
	SECONDDURATION DOUBLE, #Duration or reps
	NOTES NVARCHAR(200),
	VIDEOPATH NVARCHAR(100),

	PRIMARY KEY (USEREXERCISEID),
	INDEX (MOVEMENTID, EXERCISESEQ),

	FOREIGN KEY (USEREXERCISEID)
		REFERENCES USER_EXERCISE (USEREXERCISEID),

	FOREIGN KEY (MOVEMENTID)
		REFERENCES RF_MOVEMENT (MOVEMENTID)
);


# Chat session - for Q&A
CREATE TABLE CHAT_SESSION (
	CHATID INT NOT NULL AUTO_INCREMENT,
	DTCREATED TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,

	PRIMARY KEY (CHATID)
);


CREATE TABLE USER_CHAT_SESSION (
	USERID INT NOT NULL,
	CHATID INT NOT NULL,

	INDEX (USERID, CHATID),

	FOREIGN KEY (USERID)
		REFERENCES USER (USERID),

	FOREIGN KEY (CHATID)
		REFERENCES CHAT_SESSION (CHATID)
);

CREATE TABLE CHAT_MESSAGE (
	MESSAGEID INT NOT NULL AUTO_INCREMENT,
	USERID INT NOT NULL,
	MESSAGE NVARCHAR(256),
	DTCREATED TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,

	PRIMARY KEY (MESSAGEID),
	INDEX (USERID),

	FOREIGN KEY (USERID)
		REFERENCES USER (USERID)
);